;; -*- lexical-binding: t; -*-
(cl-macrolet
    ((example (&rest body)
       `'((.example
           (code ,(format "%S" (macroexp-progn body)))
           (p "Returns:")
           (pre ,(eval `(progn ,@body) t))))))
  `( html [:lang "en"]
     (head
      (meta[:charset UTF-8])
      (link [:rel "stylesheet" :href "https://cdn.simplecss.org/simple.min.css"])
      (style "pre { white-space: pre-line; } .center { margin: auto; }")
      (title "MEL: Elisp HTML Templating"))
     (body
      (h1 "MEL: Elisp HTML Templating")
      (p.center (img [ :src "./logo.png"
                       :alt "A honeycomb with the word 'mel' written in honey in the center."]))
      (q.center "Short and sweet HTML.")
      (h2 "Usage")
      ,(mel-md "The `mel` function accepts any number of nodes and returns an HTML string."
               "Each node is a list of the following form:")
      (pre "(TAG [attribute val...] CHILDREN...)")
      (h3 "Tags")
      ,(mel-md "`TAG` must be a symbol staring with the name of an HTML tag.")
      ,@(example (mel '(h1 "heading")))
      (h3 "Classes")
      ,(mel-md "The `.` separator can be used in a tag symbol name to indicate a class.")
      ,@(example (mel '(h1.class "heading")))
      (p "It may be used multiple times.")
      ,@(example (mel '(h1.one.two "heading")))
      ,(mel-md "As a special case, if a tag symbol begins with a `.`, a div tag is implied.")
      ,@(example (mel '(.class "content")))
      (h3 "IDs")
      ,(mel-md "A single `#` separator can be used to associate an ID with a tag."
               "Note that the separator must be escaped with a `\\` in elisp."
               "The `@` separator is an alias for `#` which does not need to be escaped.")
      ,@(example (mel '(h1\#one "heading") '(h2@two "heading")))
      (h3 "Attributes")
      (p "An optional attribute vector may be added as the second element of a node list."
         "Each attribute must be a symbol (optionally a keyword) followed by its value."
         "The value will be coerced to its string representation.")
      ,@(example (mel '(h1 [:one "true" :two false] "heading")))
      (h3 "Children")
      (p "Any elements of a node specified after the tag and optional attribute vector are the node's children."
         "They may be either strings or nodes.")
      ,@(example (mel '(p "example " (span "text"))))
      (h2 "Tempalte Files")
      ,(mel-md "An `htmel` file must contain an emacs-lisp program."
               "When evaluated, the value of the last expression must be a mel spec for an HTML document."
               "For example, the source for this page is stored in `[./index.htmel](./index.htmel)`.")
      ,(mel-md "Content stored in other files can be included via the `mel-load` function.\n")
      (h2 "File Inclusion")
      ,(mel-md "The `mel-load` function can be used to parse and load files into a template."))))
